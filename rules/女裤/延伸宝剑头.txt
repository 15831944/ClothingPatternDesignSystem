规则 前腰头(腰头宽,顶部从左到右4个点,底部从左到右4个点,省尖点)

输入 参数 wb
输入 点 up1
输入 点 up2
输入 点 up3
输入 点 up4
输入 点 do1
输入 点 do2
输入 点 do3
输入 点 do4
输入 点 sj

do3 & up3 & do4 & up4 = 拼接腰头(sj, do2, up2, do3, up3, do4, up4)

规则 将拼接点向上平移0.15cm(??)，使得曲线更顺。注意up3、do3没有移动。
up2 = 向上平移点(up2, 0.15)
do2 = 向上平移点(do2, 0.15)

规则 -----------------------------------------------------------------
规则 延伸宝剑头 左前腰头延伸7cm 右前腰头延伸4cm加宝剑头1.5cm 缝份1cm

点 down = (0, 1)
点 up = (0, -1)
点 left = (-1, 0)
点 right = (1, 0)

规则 求左边缝份的两个端点
曲线 tmp1 = up1 圆顺 up2 圆顺 up4
点 up0 = 求偏移(up1, 0.15, right)
点 do0 = 求偏移(do1, 0.15, right)
直线 tmp2 = up0 连接 do0
点 cross1 = 求交点(tmp1, tmp2)
点 vec1 = 方向向量(cross1, up1)
点 vec2 = 方向向量(do1, up1)
点 up00 = 求偏移(up0, 0.5, vec1)
点 do00 = 求偏移(do0, 0.5, vec1)
点 up01 = 求偏移(up00, 6.5, vec1)
点 do01 = 求偏移(do00, 6.5, vec1)
点 up02 = 求偏移(up01, 1, vec1)
点 do02 = 求偏移(do01, 1, vec1)
点 up03 = 求偏移(up02, 1, vec2)
点 do03 = 求偏移(do02, -1, vec2)

规则 求右边缝份的两个端点
点 up5 = 求偏移(up4, 0.2, left)
点 do5 = 求偏移(do4, 0.2, left)
规则 直线 tmp3 = up5 连接 do5
规则 点 cross2 = 求交点(tmp1, tmp3) 这个求交点有未知 bug
点 vec3 = 方向向量(up3, up4)
点 vec4 = 方向向量(do4, up4)
点 up50 = 求偏移(up5, 1, vec3)
点 do50 = 求偏移(do5, 1, vec3)
点 up51 = 求偏移(up50, 1, vec4)
点 do51 = 求偏移(do50, -1, vec4)

规则 求中间缝份的两个端点
点 vec5 = 方向向量(do2, up2)
点 up21 = 求偏移(up2, 1, vec5)
点 do21 = 求偏移(do2, -1, vec5)

路径 yao_tou_left_outline = up03 圆顺 up21 圆顺 up51 连接 do51 圆顺 do21 圆顺 do03 连接 up03
路径 yao_tou_left_inline = up1 圆顺 up2 圆顺 up4 连接 do4 圆顺 do2 圆顺 do1 连接 up1 以及 up0 连接 up01 连接 do01 连接 do0 以及 up00 连接 do00 以及 up2 连接 do2 
yao_tou_left_inline = yao_tou_left_inline.标记(内部)

点 ytl1 = 等分点(up1, do1, 0.5)
ytl1 = 求偏移(ytl1, 1, right)
路径 ytl_wl = 水平经线(ytl1, 3)


规则 将左前腰上各点做水平镜像处理，得到右前腰上各点
参数 x0 = up1.横坐标
x0 = x0 - 8
点 u1 = 求水平镜像点(up1, x0)
点 u2 = 求水平镜像点(up2, x0)
点 u3 = 求水平镜像点(up3, x0)
点 u4 = 求水平镜像点(up4, x0)
点 d1 = 求水平镜像点(do1, x0)
点 d2 = 求水平镜像点(do2, x0)
点 d3 = 求水平镜像点(do3, x0)
点 d4 = 求水平镜像点(do4, x0)
点 u21 = 求水平镜像点(up21, x0)
点 u51 = 求水平镜像点(up51, x0)
点 d51 = 求水平镜像点(do51, x0)
点 d21 = 求水平镜像点(do21, x0)
点 u0 = 求水平镜像点(up03, x0)
点 d0 = 求水平镜像点(do03, x0)

规则 画右前腰上宝剑头
参数 vec1x = vec1.横坐标
参数 vec1y = vec1.纵坐标
参数 vec6x = -vec1x
点 vec6 = (-vec1x, vec1y)
点 u11 = 求偏移(u1, 4, vec6)
点 d11 = 求偏移(d1, 4, vec6)
点 vertex0 = 等分点(u11, d11, 0.5)
点 vertex1 = 求偏移(vertex0, 1.5, vec6)
直线 v2u = u11 连接 vertex1
直线 v2d = d11 连接 vertex1
点 vec8 = 求法线向量(vertex0, v2u)
点 vec9 = 求法线向量(vertex0, v2d)
直线 v2u_ = 平移直线(v2u, vec8, 1)
直线 v2d_ = 平移直线(v2d, vec9, 1)
点 vertex2 = 求交点(v2u_, v2d_)
点 u00 = 求偏移(u0, 4, vec6)
点 d00 = 求偏移(d0, 4, vec6)
直线 tmp4 = u0 连接 u00
直线 tmp5 = d0 连接 d00
点 u01 = 求交点(v2u_, tmp4)
点 d01 = 求交点(v2d_, tmp5)

点 ytr1 = 求水平镜像点(ytl1, x0-1.5)
ytr1 = 求偏移(ytr1, 4, up)
路径 ytr_wl = 水平经线(ytr1, 3)

路径 yao_tou_right_outline = u01 圆顺 u21 圆顺 u51 连接 d51 圆顺 d21 圆顺 d01 连接 vertex2 连接 u01
路径 yao_tou_right_inline = u11 圆顺 u2 圆顺 u4 连接 d4 圆顺 d2 圆顺 d11 连接 vertex1 连接 u11 以及 u3 连接 d3 以及 u1 连接 d1
yao_tou_right_inline = yao_tou_right_inline.标记(内部)


规则 -----------------------输出-----------------------------
规则 路径 yao_tou = yao_tou_left_outline 以及 yao_tou_left_inline 以及 ytl_wl 以及 yao_tou_right_outline 以及yao_tou_right_inline 以及 ytr_wl
路径 yao_tou = yao_tou_left_inline 以及 ytl_wl 以及 yao_tou_right_inline 以及 ytr_wl
输出 yao_tou